{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Convert Array to String\n*/\nexport var convertArrToStr = function convertArrToStr(arr) {\n  return arr.join();\n};\n/**\n * Convert String to Array\n */\n\nexport var convertStrToArr = function convertStrToArr(str) {\n  return str.split(',').map(function (entry) {\n    return parseInt(entry, 10);\n  }).filter(function (entry) {\n    return typeof entry === 'number';\n  });\n};\nexport var convertStrToArrString = function convertStrToArrString(str) {\n  return str.split(',');\n};\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\n\nexport var cryptData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, value) {\n    var data, finalData, bufferObj, _bufferObj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof value === 'undefined')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 2:\n            if (!(typeof value === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 4:\n            data = value.toString();\n            finalData = '';\n\n            if (type === 'enc') {\n              // Create buffer object, specifying utf8 as encoding\n              bufferObj = Buffer.from(data, \"utf8\"); // Encode the Buffer as a base64 string\n\n              finalData = bufferObj.toString(\"base64\");\n            } else if (type === 'dec') {\n              // Create buffer object, specifying base64 as encoding\n              _bufferObj = Buffer.from(data, \"base64\"); // Encode the Buffer as a utf8 string\n\n              finalData = _bufferObj.toString(\"utf8\");\n              console.log('finalData', finalData);\n            }\n\n            return _context.abrupt(\"return\", finalData);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function cryptData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\n\nexport var toBase64 = function toBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"module"}