{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Convert Array to String\n*/\nexport var convertArrToStr = function convertArrToStr(arr) {\n  return arr.join();\n};\n/**\n * Convert String to Array\n */\n\nexport var convertStrToArr = function convertStrToArr(str) {\n  return str.split(',').map(function (entry) {\n    return parseInt(entry, 10);\n  }).filter(function (entry) {\n    return typeof entry === 'number';\n  });\n};\nexport var convertStrToArrString = function convertStrToArrString(str) {\n  return str.split(',');\n};\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\n\nexport var cryptData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, value) {\n    var data, finalData, bufferObj, _bufferObj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof value === 'undefined')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 2:\n            if (!(typeof value === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 4:\n            data = value.toString();\n            finalData = '';\n\n            if (type === 'enc') {\n              // Create buffer object, specifying utf8 as encoding\n              bufferObj = Buffer.from(data, \"utf8\"); // Encode the Buffer as a base64 string\n\n              finalData = bufferObj.toString(\"base64\");\n            } else if (type === 'dec') {\n              // Create buffer object, specifying base64 as encoding\n              _bufferObj = Buffer.from(data, \"base64\"); // Encode the Buffer as a utf8 string\n\n              finalData = _bufferObj.toString(\"utf8\");\n              console.log('finalData', finalData);\n            }\n\n            return _context.abrupt(\"return\", finalData);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function cryptData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\n\nexport var toBase64 = function toBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n  });\n};","map":{"version":3,"sources":["/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/src/utils/utils.ts"],"names":["convertArrToStr","arr","join","convertStrToArr","str","split","map","entry","parseInt","filter","convertStrToArrString","cryptData","type","value","data","toString","finalData","bufferObj","Buffer","from","console","log","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error"],"mappings":";;;AAAA;AACA;AACA;AACA,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAgB;AAC3C,SAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,CAFM;AAIP;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAiB;AAC5C,SAAOA,GAAG,CACLC,KADE,CACI,GADJ,EAEFC,GAFE,CAEE,UAACC,KAAD;AAAA,WAAmBC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAA3B;AAAA,GAFF,EAGFE,MAHE,CAGK,UAACF,KAAD;AAAA,WAAgB,OAAOA,KAAP,KAAgB,QAAhC;AAAA,GAHL,CAAP;AAIH,CALM;AAOP,OAAO,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACN,GAAD,EAAiB;AAClD,SAAOA,GAAG,CACLC,KADE,CACI,GADJ,CAAP;AAEH,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMM,SAAS;AAAA,sEAAG,iBACvBC,IADuB,EAEvBC,KAFuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIlB,OAAOA,KAAP,KAAiB,WAJC;AAAA;AAAA;AAAA;;AAAA,6CAImB,CAJnB;;AAAA;AAAA,kBAKlB,OAAOA,KAAP,KAAiB,IALC;AAAA;AAAA;AAAA;;AAAA,6CAKY,CALZ;;AAAA;AAOfC,YAAAA,IAPe,GAORD,KAAK,CAACE,QAAN,EAPQ;AAQjBC,YAAAA,SARiB,GAQA,EARA;;AASrB,gBAAGJ,IAAI,KAAK,KAAZ,EAAmB;AACf;AACMK,cAAAA,SAFS,GAEGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkB,MAAlB,CAFH,EAGf;;AACAE,cAAAA,SAAS,GAAIC,SAAS,CAACF,QAAV,CAAmB,QAAnB,CAAb;AACH,aALD,MAMK,IAAGH,IAAI,KAAK,KAAZ,EAAmB;AACpB;AACMK,cAAAA,UAFc,GAEFC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkB,QAAlB,CAFE,EAGpB;;AACAE,cAAAA,SAAS,GAAIC,UAAS,CAACF,QAAV,CAAmB,MAAnB,CAAb;AACAK,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,SAAzB;AACH;;AArBoB,6CAsBdA,SAtBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATL,SAAS;AAAA;AAAA;AAAA,GAAf;AAyBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMW,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAgB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrE,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,IAAAA,MAAM,CAACG,MAAP,GAAgB;AAAA,aAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAAb;AAAA,KAAhB;;AACAJ,IAAAA,MAAM,CAACK,OAAP,GAAiB,UAAAC,KAAK;AAAA,aAAIP,MAAM,CAACO,KAAD,CAAV;AAAA,KAAtB;AACH,GALuC,CAAhB;AAAA,CAAjB","sourcesContent":["/**\n * Convert Array to String\n*/\nexport const convertArrToStr = (arr: any[]) => {\n    return arr.join();\n}\n\n/**\n * Convert String to Array\n */\nexport const convertStrToArr = (str: string) => {\n    return str\n        .split(',')\n        .map((entry: string) => parseInt(entry, 10))\n        .filter((entry: any) => typeof entry ==='number');\n}\n\nexport const convertStrToArrString = (str: string) => {\n    return str\n        .split(',');\n}\n\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\nexport const cryptData = async (\n  type: 'enc' | 'dec',\n  value: any\n) => {\n    if(typeof value === 'undefined') return 0;\n    if(typeof value === null) return 0;\n    \n    const data = value.toString();\n    let finalData: any = '';\n    if(type === 'enc') {\n        // Create buffer object, specifying utf8 as encoding\n        const bufferObj = Buffer.from(data, \"utf8\");\n        // Encode the Buffer as a base64 string\n        finalData =  bufferObj.toString(\"base64\");\n    }\n    else if(type === 'dec') {\n        // Create buffer object, specifying base64 as encoding\n        const bufferObj = Buffer.from(data, \"base64\");\n        // Encode the Buffer as a utf8 string\n        finalData =  bufferObj.toString(\"utf8\");\n        console.log('finalData', finalData);\n    }\n    return finalData;\n}\n\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\nexport const toBase64 = (file: File) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n});"]},"metadata":{},"sourceType":"module"}