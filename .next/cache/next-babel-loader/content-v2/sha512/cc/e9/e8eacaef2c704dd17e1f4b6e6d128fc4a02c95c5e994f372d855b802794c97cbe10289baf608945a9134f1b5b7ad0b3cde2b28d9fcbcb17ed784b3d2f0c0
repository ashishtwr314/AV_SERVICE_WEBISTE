{"ast":null,"code":"/**\n * Convert Array to String\n*/\nexport const convertArrToStr = arr => {\n  return arr.join();\n};\n/**\n * Convert String to Array\n */\n\nexport const convertStrToArr = str => {\n  return str.split(',').map(entry => parseInt(entry, 10)).filter(entry => typeof entry === 'number');\n};\nexport const convertStrToArrString = str => {\n  return str.split(',');\n};\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\n\nexport const cryptData = async (type, value) => {\n  if (typeof value === 'undefined') return 0;\n  if (typeof value === null) return 0;\n  const data = value.toString();\n  let finalData = '';\n\n  if (type === 'enc') {\n    // Create buffer object, specifying utf8 as encoding\n    const bufferObj = Buffer.from(data, \"utf8\"); // Encode the Buffer as a base64 string\n\n    finalData = bufferObj.toString(\"base64\");\n  } else if (type === 'dec') {\n    // Create buffer object, specifying base64 as encoding\n    const bufferObj = Buffer.from(data, \"base64\"); // Encode the Buffer as a utf8 string\n\n    finalData = bufferObj.toString(\"utf8\");\n    console.log('finalData', finalData);\n  }\n\n  return finalData;\n};\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\n\nexport const toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});","map":null,"metadata":{},"sourceType":"module"}