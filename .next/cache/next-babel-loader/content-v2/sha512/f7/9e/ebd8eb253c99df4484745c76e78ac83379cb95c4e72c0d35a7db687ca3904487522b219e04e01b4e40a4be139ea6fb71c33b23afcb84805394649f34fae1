{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/pages/services/feedback/[...all].tsx\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\"; // components\n\nimport PageLoader from \"../../../src/components/global/PageLoader\";\nimport PageLayout from \"../../../src/components/local/services/feedback/PageLayout\"; // API Calls\n\nimport { fetchFeedbackById } from \"../../../src/utils/Apicalls\"; // utils\n\nimport { cryptData } from \"../../../src/utils/utils\";\n\nconst Feedback = () => {\n  const router = useRouter();\n  const {\n    0: isPageLoad,\n    1: setIsPageLoad\n  } = useState(true);\n  const {\n    0: feedbackContent,\n    1: setFeedbackContent\n  } = useState(null);\n  const {\n    0: isSurveyClicked,\n    1: setIsSurveyClicked\n  } = useState(false);\n\n  const getFeedback = async () => {\n    setIsPageLoad(true);\n    const {\n      c,\n      ct,\n      f\n    } = router.query;\n    const c_id = await cryptData(\"dec\", c);\n    const fc_id = await cryptData(\"dec\", ct);\n    const fdq_id = await cryptData(\"dec\", f);\n    await fetchFeedbackById({\n      c_id,\n      fc_id,\n      fdq_id\n    }).then(resp => {\n      console.log(resp);\n      if (resp.status === 200) setFeedbackContent(resp.data);\n    }).then(() => {\n      setIsPageLoad(false);\n    }).catch(() => {});\n  };\n\n  useEffect(() => {\n    if (!router.isReady) return;\n    getFeedback();\n  }, [router.isReady]);\n  return isPageLoad ? /*#__PURE__*/_jsxDEV(PageLoader, {\n    typeT: \"Bars\",\n    visibleT: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(PageLayout, {\n    feedbackContent: feedbackContent,\n    survey: {\n      isSurveyClicked,\n      setIsSurveyClicked\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Feedback;","map":{"version":3,"sources":["/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/pages/services/feedback/[...all].tsx"],"names":["useState","useEffect","useRouter","PageLoader","PageLayout","fetchFeedbackById","cryptData","Feedback","router","isPageLoad","setIsPageLoad","feedbackContent","setFeedbackContent","isSurveyClicked","setIsSurveyClicked","getFeedback","c","ct","f","query","c_id","fc_id","fdq_id","then","resp","console","log","status","data","catch","isReady"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,2CAAvB;AACA,OAAOC,UAAP,MAAuB,4DAAvB,C,CAEA;;AACA,SAASC,iBAAT,QAAkD,6BAAlD,C,CAEA;;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAU,IAAV,CAA5C;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAM,IAAN,CAAtD;AACA,QAAM;AAAA,OAACa,eAAD;AAAA,OAAkBC;AAAlB,MAAwCd,QAAQ,CAAU,KAAV,CAAtD;;AAEA,QAAMe,WAAW,GAAG,YAAY;AAC5BL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAM;AAAEM,MAAAA,CAAF;AAAKC,MAAAA,EAAL;AAASC,MAAAA;AAAT,QAAeV,MAAM,CAACW,KAA5B;AACA,UAAMC,IAAI,GAAG,MAAMd,SAAS,CAAC,KAAD,EAAQU,CAAR,CAA5B;AACA,UAAMK,KAAK,GAAG,MAAMf,SAAS,CAAC,KAAD,EAAQW,EAAR,CAA7B;AACA,UAAMK,MAAM,GAAG,MAAMhB,SAAS,CAAC,KAAD,EAAQY,CAAR,CAA9B;AAEA,UAAMb,iBAAiB,CAAC;AAAEe,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,CAAjB,CACDC,IADC,CACKC,IAAD,IAAU;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAIA,IAAI,CAACG,MAAL,KAAgB,GAApB,EAAyBf,kBAAkB,CAACY,IAAI,CAACI,IAAN,CAAlB;AAC5B,KAJC,EAKDL,IALC,CAKI,MAAM;AACRb,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAPC,EAQDmB,KARC,CAQK,MAAM,CAAE,CARb,CAAN;AASH,GAhBD;;AAkBA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,MAAM,CAACsB,OAAZ,EAAqB;AACrBf,IAAAA,WAAW;AACd,GAHQ,EAGN,CAACP,MAAM,CAACsB,OAAR,CAHM,CAAT;AAKA,SAAOrB,UAAU,gBACb,QAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAyB,IAAA,QAAQ,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,UADa,gBAGb,QAAC,UAAD;AACI,IAAA,eAAe,EAAEE,eADrB;AAEI,IAAA,MAAM,EAAE;AACJE,MAAAA,eADI;AAEJC,MAAAA;AAFI;AAFZ;AAAA;AAAA;AAAA;AAAA,UAHJ;AAWH,CAxCD;;AA0CA,eAAeP,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\n// components\nimport PageLoader from \"../../../src/components/global/PageLoader\";\nimport PageLayout from \"../../../src/components/local/services/feedback/PageLayout\";\n\n// API Calls\nimport { fetchFeedbackById, submitFeedback } from \"../../../src/utils/Apicalls\";\n\n// utils\nimport { cryptData } from \"../../../src/utils/utils\";\n\nconst Feedback = () => {\n    const router = useRouter();\n    const [isPageLoad, setIsPageLoad] = useState<boolean>(true);\n    const [feedbackContent, setFeedbackContent] = useState<any>(null);\n    const [isSurveyClicked, setIsSurveyClicked] = useState<boolean>(false);\n\n    const getFeedback = async () => {\n        setIsPageLoad(true);\n        const { c, ct, f } = router.query;\n        const c_id = await cryptData(\"dec\", c);\n        const fc_id = await cryptData(\"dec\", ct);\n        const fdq_id = await cryptData(\"dec\", f);\n\n        await fetchFeedbackById({ c_id, fc_id, fdq_id })\n            .then((resp) => {\n                console.log(resp);\n                if (resp.status === 200) setFeedbackContent(resp.data);\n            })\n            .then(() => {\n                setIsPageLoad(false);\n            })\n            .catch(() => {});\n    };\n\n    useEffect(() => {\n        if (!router.isReady) return;\n        getFeedback();\n    }, [router.isReady]);\n\n    return isPageLoad ? (\n        <PageLoader typeT=\"Bars\" visibleT={true} />\n    ) : (\n        <PageLayout\n            feedbackContent={feedbackContent}\n            survey={{\n                isSurveyClicked,\n                setIsSurveyClicked,\n            }}\n        />\n    );\n};\n\nexport default Feedback;\n"]},"metadata":{},"sourceType":"module"}