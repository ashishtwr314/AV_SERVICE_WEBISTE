{"ast":null,"code":"/**\n * Convert Array to String\n*/\nexport const convertArrToStr = arr => {\n  return arr.join();\n};\n/**\n * Convert String to Array\n */\n\nexport const convertStrToArr = str => {\n  return str.split(',').map(entry => parseInt(entry, 10)).filter(entry => typeof entry === 'number');\n};\nexport const convertStrToArrString = str => {\n  return str.split(',');\n};\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\n\nexport const cryptData = async (type, value) => {\n  if (typeof value === 'undefined') return 0;\n  if (typeof value === null) return 0;\n  const data = value.toString();\n  let finalData = '';\n\n  if (type === 'enc') {\n    // Create buffer object, specifying utf8 as encoding\n    const bufferObj = Buffer.from(data, \"utf8\"); // Encode the Buffer as a base64 string\n\n    finalData = bufferObj.toString(\"base64\");\n  } else if (type === 'dec') {\n    // Create buffer object, specifying base64 as encoding\n    const bufferObj = Buffer.from(data, \"base64\"); // Encode the Buffer as a utf8 string\n\n    finalData = bufferObj.toString(\"utf8\");\n    console.log('finalData', finalData);\n  }\n\n  return finalData;\n};\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\n\nexport const toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});","map":{"version":3,"sources":["/Users/kings/Downloads/AV SERVICE WEBSITE/AV_SERVICE_WEBISTE_FULL/src/utils/utils.ts"],"names":["convertArrToStr","arr","join","convertStrToArr","str","split","map","entry","parseInt","filter","convertStrToArrString","cryptData","type","value","data","toString","finalData","bufferObj","Buffer","from","console","log","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAIC,GAAD,IAAgB;AAC3C,SAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAAiB;AAC5C,SAAOA,GAAG,CACLC,KADE,CACI,GADJ,EAEFC,GAFE,CAEGC,KAAD,IAAmBC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAF7B,EAGFE,MAHE,CAGMF,KAAD,IAAgB,OAAOA,KAAP,KAAgB,QAHrC,CAAP;AAIH,CALM;AAOP,OAAO,MAAMG,qBAAqB,GAAIN,GAAD,IAAiB;AAClD,SAAOA,GAAG,CACLC,KADE,CACI,GADJ,CAAP;AAEH,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,SAAS,GAAG,OACvBC,IADuB,EAEvBC,KAFuB,KAGpB;AACD,MAAG,OAAOA,KAAP,KAAiB,WAApB,EAAiC,OAAO,CAAP;AACjC,MAAG,OAAOA,KAAP,KAAiB,IAApB,EAA0B,OAAO,CAAP;AAE1B,QAAMC,IAAI,GAAGD,KAAK,CAACE,QAAN,EAAb;AACA,MAAIC,SAAc,GAAG,EAArB;;AACA,MAAGJ,IAAI,KAAK,KAAZ,EAAmB;AACf;AACA,UAAMK,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkB,MAAlB,CAAlB,CAFe,CAGf;;AACAE,IAAAA,SAAS,GAAIC,SAAS,CAACF,QAAV,CAAmB,QAAnB,CAAb;AACH,GALD,MAMK,IAAGH,IAAI,KAAK,KAAZ,EAAmB;AACpB;AACA,UAAMK,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkB,QAAlB,CAAlB,CAFoB,CAGpB;;AACAE,IAAAA,SAAS,GAAIC,SAAS,CAACF,QAAV,CAAmB,MAAnB,CAAb;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,SAAzB;AACH;;AACD,SAAOA,SAAP;AACH,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,QAAQ,GAAIC,IAAD,IAAgB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrE,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAArB;;AACAI,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,EAAAA,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACH,CALuC,CAAjC","sourcesContent":["/**\n * Convert Array to String\n*/\nexport const convertArrToStr = (arr: any[]) => {\n    return arr.join();\n}\n\n/**\n * Convert String to Array\n */\nexport const convertStrToArr = (str: string) => {\n    return str\n        .split(',')\n        .map((entry: string) => parseInt(entry, 10))\n        .filter((entry: any) => typeof entry ==='number');\n}\n\nexport const convertStrToArrString = (str: string) => {\n    return str\n        .split(',');\n}\n\n/**\n * Encrypt data for URL params\n * @param {\n * value\n * }\n*/\nexport const cryptData = async (\n  type: 'enc' | 'dec',\n  value: any\n) => {\n    if(typeof value === 'undefined') return 0;\n    if(typeof value === null) return 0;\n    \n    const data = value.toString();\n    let finalData: any = '';\n    if(type === 'enc') {\n        // Create buffer object, specifying utf8 as encoding\n        const bufferObj = Buffer.from(data, \"utf8\");\n        // Encode the Buffer as a base64 string\n        finalData =  bufferObj.toString(\"base64\");\n    }\n    else if(type === 'dec') {\n        // Create buffer object, specifying base64 as encoding\n        const bufferObj = Buffer.from(data, \"base64\");\n        // Encode the Buffer as a utf8 string\n        finalData =  bufferObj.toString(\"utf8\");\n        console.log('finalData', finalData);\n    }\n    return finalData;\n}\n\n/**\n * Convert image to base64\n * @param {\n *  file: File\n * }\n*/\nexport const toBase64 = (file: File) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n});"]},"metadata":{},"sourceType":"module"}